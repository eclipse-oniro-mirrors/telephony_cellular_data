/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

sequenceable ApnAttribute..OHOS.Telephony.ApnAttribute;
sequenceable ApnActivateReportInfo..OHOS.Telephony.ApnActivateReportInfoIpc;
sequenceable CellularDataTypes..OHOS.Telephony.ApnInfo;
interface OHOS.Telephony.SimAccountCallback;
interface OHOS.Telephony.ICellularDataManager {
    void IsCellularDataEnabled([out] boolean dataEnabled);
    void EnableCellularData([in] boolean enable);
    void EnableIntelligenceSwitch([in] boolean enable);
    void GetCellularDataState([out] int state);
    void IsCellularDataRoamingEnabled([in] int slotId, [inout] boolean dataRoamingEnabled);
    void EnableCellularDataRoaming([in] int slotId, [in] boolean enable);
    void HandleApnChanged([in] int slotId);
    void GetDefaultCellularDataSlotId([out] int slotId);
    void GetDefaultCellularDataSimId([out] int simId);
    void SetDefaultCellularDataSlotId([in] int slotId);
    void GetCellularDataFlowType([out] int type);
    void HasInternetCapability([in] int slotId, [in] int cid, [out] int capability);
    void ClearCellularDataConnections([in] int slotId);
    void ClearAllConnections([in] int slotId, [in] int reason);
    void RegisterSimAccountCallback([in] SimAccountCallback callbackparam);
    void UnregisterSimAccountCallback([in] SimAccountCallback callbackparam);
    void GetDataConnApnAttr([in] int slotId, [out] ApnAttribute apnAttr);
    void GetDataConnIpType([in] int slotId, [out] String ipType);
    void GetApnState([in] int slotId, [in] String apnType, [out] int state);
    void GetDataRecoveryState([out] int state);
    void IsNeedDoRecovery([in] int slotId, [in] boolean needDoRecovery);
    void InitCellularDataController([in] int slotId);
    void EstablishAllApnsIfConnectable([in] int slotId);
    void ReleaseCellularDataConnection([in] int slotId);
    void GetCellularDataSupplierId([in] int slotId, [in] unsigned long capability, [out] unsigned int supplierId);
    void CorrectNetSupplierNoAvailable([in] int slotId);
    void GetSupplierRegisterState([in] unsigned int supplierId, [out] int regState);
    void GetIfSupportDunApn([out] boolean isSupportDun);
    void GetDefaultActReportInfo([in] int slotId, [out] ApnActivateReportInfoIpc info);
    void GetInternalActReportInfo([in] int slotId, [out] ApnActivateReportInfoIpc info);
    void GetIntelligenceSwitchState([out] boolean switchState);
    void QueryApnIds([in] ApnInfo apnInfo, [out] List<unsigned int> apnIdList);
    void SetPreferApn([in] int apnId);
    void QueryAllApnInfo([out] List<ApnInfo> apnInfoList);
    void SendUrspDecodeResult([in] int slotId, [in] List<unsigned char> buffer);
    void SendUePolicySectionIdentifier([in] int slotId, [in] List<unsigned char> buffer);
    void SendImsRsdList([in] int slotId, [in] List<unsigned char> buffer);
    void GetNetworkSliceAllowedNssai([in] int slotId, [in] List<unsigned char> buffer);
    void GetNetworkSliceEhplmn([in] int slotId);
};
